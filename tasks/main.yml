---
- name: "Assert that input variables were informed correctly."
  ansible.builtin.assert:
    that:
      - smpe_apply_options is mapping
      - (smpe_global_csi is string) and (smpe_global_csi is iterable) and (smpe_global_csi is not mapping)
      - (smpe_smppts is string) and (smpe_smpnts is iterable) and (smpe_smpnts is not mapping)
      - (smpe_target_zone is string) and (smpe_target_zone is iterable) and (smpe_target_zone is not mapping)
      - smpe_apply_options | isValidContent
      - (smpe_global_csi | length > 0) and (smpe_global_csi | length <= 42) and (smpe_global_csi | trim == smpe_global_csi)
      - smpe_smppts | trim == smpe_smppts
      - (smpe_target_zone | length > 0) and (smpe_target_zone | length <= 7) and (smpe_target_zone | trim == smpe_target_zone)
    success_msg: "SUCCESS: The input variables were informed successfully!"
    fail_msg: "ERROR: One or more input variables were wrongly informed. Make sure there are no extra spaces on the variables and the length is being respected."
    quiet: true

- name: "Verify if informed SMP/E GLOBAL CSI data set exists."
  ibm.ibm_zos_core.zos_find:
    patterns: "{{ smpe_global_csi | upper }}"
    resource_type: cluster
  register: zos_smpe_apply_find_global_csi

- name: "Fail play if informed SMP/E GLOBAL CSI data set does not exist."
  ansible.builtin.fail:
    msg: "ERROR: The informed SMP/E GLOBAL CSI data set '{{ smpe_global_csi | upper }}' was not found."
  when: zos_smpe_apply_find_global_csi.data_sets | length == 0

- name: "If SMPPTS data set was informed, verify its existence."
  ibm.ibm_zos_core.zos_find:
    patterns: "{{ smpe_smppts | upper }}"
    resource_type: nonvsam
  register: zos_smpe_apply_find_smppts

- name: "Fail play if informed SMPPTS data set does not exist."
  ansible.builtin.fail:
    msg: "ERROR: The informed SMPPTS data set '{{ smpe_smppts | upper }}' was not found."
  when: zos_smpe_apply_find_smppts.data_sets | length == 0

- name: "Execute GIMSMP program with SMP/E APPLY command based on user input."
  ibm.ibm_zos_core.zos_mvs_raw:
    program_name: gimsmp
    parm: "PROCESS=WAIT"
    auth: true
    dds: "{{ (__dds + __smppts) if smpe_smppts | length > 0 else __dds }}"
  register: zos_smpe_apply_output
  vars:
    __smppts:
      - dd_data_set:
          dd_name: smppts
          data_set_name: "{{ smpe_smppts | upper }}"
    __dds:
      - dd_data_set:
          dd_name: smpcsi
          data_set_name: "{{ smpe_global_csi | upper }}"
      - dd_output:
          dd_name: smpout
          return_content:
            type: text
      - dd_output:
          dd_name: smprpt
          return_content:
            type: text
      - dd_output:
          dd_name: sysprint
          return_content:
            type: text
      - dd_vio:
          dd_name: sysut1
      - dd_vio:
          dd_name: sysut2
      - dd_vio:
          dd_name: sysut3
      - dd_vio:
          dd_name: sysut4
      - dd_input:
          dd_name: smpcntl
          content: "{{ lookup('template', 'smpcntl.j2') }}"

- name: "If return code is different than 0 or 4, fail and display the entire job output."
  ansible.builtin.debug:
    msg: "{{ zos_smpe_apply_output }}"
  when: zos_smpe_apply_output.ret_code.code | int not in [0, 4]
  failed_when: zos_smpe_apply_output.ret_code.code | int not in [0, 4]

- name: "Display output content if show_output is true."
  ansible.builtin.debug:
    msg: "{{ zos_smpe_apply_output.dd_names | selectattr('dd_name', 'in', ['smpout', 'smprpt']) | list }}"
  when: show_output
